{"version":3,"sources":["Calculator.js","App.js","index.js"],"names":["Calculator","props","useState","inputText","setInputText","multiplier","setMultiplier","undefined","firstNumber","setFirstNumber","action","setAction","inputChangeMultiplier","setInputChangeMultiplier","actionSetter","appendInput","input","sign","Math","presentedInputValue","Number","parseFloat","toString","toPrecision","replace","className","type","value","maxLength","onClick","calculate","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yKA+HeA,MA7Hf,SAAoBC,GAAQ,IAAD,EACSC,mBAAS,GADlB,mBAClBC,EADkB,KACPC,EADO,OAEWF,mBAAS,IAFpB,mBAElBG,EAFkB,KAENC,EAFM,OAGaJ,wBAASK,GAHtB,mBAGlBC,EAHkB,KAGLC,EAHK,OAIGP,wBAASK,GAJZ,mBAIlBG,EAJkB,KAIVC,EAJU,OAMiCT,mBAAS,GAN1C,mBAMlBU,EANkB,KAMKC,EANL,KAQnBC,EAAe,SAACJ,GACpBC,EAAUD,GACVD,EAAeN,GACfG,EAAc,IACdO,EAAyB,IAsDrBE,EAAc,SAAAC,GAElB,IAAIC,EAAQC,KAAKD,KAAKd,IAAc,EACN,IAA1BS,IACFC,EAAyB,GAEzBI,EAAO,GAEU,KAAfZ,GAIJC,EAAcD,EAAa,IAC3BD,EAAaQ,EAAwBT,EAAYa,EAAQX,EAAaY,IAJpEb,EAAaQ,EAAwBT,EAAYE,EAAaW,EAAQC,IAQpEE,EAAsBC,OAAOC,WAAWlB,EAAUmB,YAAYC,YAAY,IAAIC,QAAQ,SAAS,IAErG,OACE,sBAAKC,UAAU,uBAAf,UACE,qBAAKA,UAAU,MAAf,SACE,uBAAOC,KAAK,OAAOC,MAAOR,EAAqBS,UAAU,SAE3D,sBAAKH,UAAU,MAAf,UACE,wBAAQA,UAAU,kBAAkBI,QAAS,kBA3EjDzB,EAAa,GACbE,EAAc,SACdK,OAAUJ,IAyEN,SACiB,IAAdJ,EAAkB,KAAO,MAE5B,wBAAQsB,UAAU,kBAAkBI,QAAS,kBAAMzB,GAAcD,IAAjE,kBACA,wBAAQsB,UAAU,kBAAkBI,QAAS,kBAAMf,EAAa,QAAhE,eACA,wBAAQW,UAAU,iBAAiBI,QAAS,kBAAMf,EAAa,WAA/D,qBAEF,sBAAKW,UAAU,MAAf,UACE,wBAAQI,QAAS,kBAAMd,EAAY,IAAnC,eACA,wBAAQc,QAAS,kBAAMd,EAAY,IAAnC,eACA,wBAAQc,QAAS,kBAAMd,EAAY,IAAnC,eACA,wBAAQU,UAAU,iBAAiBI,QAAS,kBAAMf,EAAa,aAA/D,kBAEF,sBAAKW,UAAU,MAAf,UACE,wBAAQI,QAAS,kBAAMd,EAAY,IAAnC,eACA,wBAAQc,QAAS,kBAAMd,EAAY,IAAnC,eACA,wBAAQc,QAAS,kBAAMd,EAAY,IAAnC,eACA,wBAAQU,UAAU,iBAAiBI,QAAS,kBAAMf,EAAa,UAA/D,kBAEF,sBAAKW,UAAU,MAAf,UACE,wBAAQI,QAAS,kBAAMd,EAAY,IAAnC,eACA,wBAAQc,QAAS,kBAAMd,EAAY,IAAnC,eACA,wBAAQc,QAAS,kBAAMd,EAAY,IAAnC,eACA,wBAAQU,UAAU,iBAAiBI,QAAS,kBAAMf,EAAa,SAA/D,kBAEF,sBAAKW,UAAU,MAAf,UACE,wBAAQA,UAAU,cAAcI,QAAS,kBAAMd,EAAY,IAA3D,eACA,wBAAQc,QAAS,WAhGF,KAAfxB,GACFC,EAAc,KA+FZ,eACA,wBAAQmB,UAAU,iBAAiBI,QAAS,kBA5FhC,WAIhB,OAHApB,OAAeF,GACfI,OAAUJ,GAEFG,GACN,IAAK,MAEHN,EADeI,EAAcL,GAE7B,MAEF,IAAK,OAEHC,EADeI,EAAcL,GAE7B,MAEF,IAAK,QAEHC,EADeI,EAAcL,GAE7B,MAEF,IAAK,WAEHC,EADeI,EAAcL,GAE7B,MAEF,IAAK,SAEHC,EADeI,EAAcL,GASjCG,EAAc,IACdO,EAAyB,GAwD6BiB,IAAlD,sBC/GOC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCANC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.b37f5472.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nfunction Calculator(props) {\r\n  const [inputText, setInputText] = useState(0)\r\n  const [multiplier, setMultiplier] = useState(10)\r\n  const [firstNumber, setFirstNumber] = useState(undefined)\r\n  const [action, setAction] = useState(undefined)\r\n  // multiply last input by 0 if new input is needed\r\n  const [inputChangeMultiplier, setInputChangeMultiplier] = useState(0)\r\n\r\n  const actionSetter = (action) => {\r\n    setAction(action)\r\n    setFirstNumber(inputText)\r\n    setMultiplier(10)\r\n    setInputChangeMultiplier(0)\r\n  }\r\n\r\n  const reset = () => {\r\n    setInputText(0)\r\n    setMultiplier(10)\r\n    setAction(undefined)\r\n  }\r\n\r\n  const switchMultiplier = () => {\r\n    if (multiplier === 10) {\r\n      setMultiplier(1 / 10)\r\n    }\r\n  }\r\n\r\n  const calculate = () => {\r\n    setFirstNumber(undefined)\r\n    setAction(undefined)\r\n\r\n    switch (action) {\r\n      case 'mod': {\r\n        const result = firstNumber % inputText\r\n        setInputText(result)\r\n        break\r\n      }\r\n      case 'plus': {\r\n        const result = firstNumber + inputText\r\n        setInputText(result)\r\n        break\r\n      }\r\n      case 'minus': {\r\n        const result = firstNumber - inputText\r\n        setInputText(result)\r\n        break\r\n      }\r\n      case 'multiply': {\r\n        const result = firstNumber * inputText\r\n        setInputText(result)\r\n        break\r\n      }\r\n      case 'divide': {\r\n        const result = firstNumber / inputText\r\n        setInputText(result)\r\n        break\r\n      }\r\n      default: {\r\n        break\r\n      }\r\n    }\r\n\r\n    setMultiplier(10)\r\n    setInputChangeMultiplier(0)\r\n  }\r\n\r\n  const appendInput = input => {\r\n    // positive if 0 because it will be used for multiplication\r\n    let sign = (Math.sign(inputText) || 1)\r\n    if (inputChangeMultiplier === 0) {\r\n      setInputChangeMultiplier(1)\r\n      // set sign to positive for new inputs\r\n      sign = 1\r\n    }\r\n    if (multiplier === 10) {\r\n      setInputText(inputChangeMultiplier * inputText * multiplier + input * sign)\r\n      return\r\n    }\r\n    setMultiplier(multiplier / 10)\r\n    setInputText(inputChangeMultiplier * inputText + input * multiplier * sign)\r\n  }\r\n\r\n  // limit number to 10 digits and filter trailing zeros\r\n  const presentedInputValue = Number.parseFloat(inputText.toString()).toPrecision(10).replace(/\\.?0+$/,\"\")\r\n\r\n  return (\r\n    <div className=\"calculator-container\">\r\n      <div className='row'>\r\n        <input type=\"text\" value={presentedInputValue} maxLength=\"11\"/>\r\n      </div>\r\n      <div className='row'>\r\n        <button className='button-controls' onClick={() => reset()}>\r\n          {inputText === 0 ? 'AC' : 'C'}\r\n        </button>\r\n        <button className='button-controls' onClick={() => setInputText(-inputText)}>±</button>\r\n        <button className='button-controls' onClick={() => actionSetter('mod')}>%</button>\r\n        <button className='button-actions' onClick={() => actionSetter('divide')}>÷</button>\r\n      </div>\r\n      <div className='row'>\r\n        <button onClick={() => appendInput(1)}>1</button>\r\n        <button onClick={() => appendInput(2)}>2</button>\r\n        <button onClick={() => appendInput(3)}>3</button>\r\n        <button className='button-actions' onClick={() => actionSetter('multiply')}>x</button>\r\n      </div>\r\n      <div className='row'>\r\n        <button onClick={() => appendInput(4)}>4</button>\r\n        <button onClick={() => appendInput(5)}>5</button>\r\n        <button onClick={() => appendInput(6)}>6</button>\r\n        <button className='button-actions' onClick={() => actionSetter('minus')}>-</button>\r\n      </div>\r\n      <div className='row'>\r\n        <button onClick={() => appendInput(7)}>7</button>\r\n        <button onClick={() => appendInput(8)}>8</button>\r\n        <button onClick={() => appendInput(9)}>9</button>\r\n        <button className='button-actions' onClick={() => actionSetter('plus')}>+</button>\r\n      </div>\r\n      <div className='row'>\r\n        <button className='button-zero' onClick={() => appendInput(0)}>0</button>\r\n        <button onClick={() => switchMultiplier()}>.</button>\r\n        <button className='button-actions' onClick={() => calculate()}>=</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Calculator;","import Calculator from \"./Calculator\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Calculator />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}